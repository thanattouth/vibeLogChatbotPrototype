# === ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ===
import gradio as gr                           # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Web UI
import json                                   # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå JSON
import csv                                    # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV
import re                                     # Regular Expression ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô
from io import StringIO                       # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ string ‡πÄ‡∏õ‡πá‡∏ô file object
from datetime import datetime                 # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤
from langchain_community.vectorstores import FAISS           # Vector database ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
from langchain_huggingface import HuggingFaceEmbeddings      # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô vector
from langchain_ollama import OllamaLLM as Ollama             # LLM ‡∏£‡∏±‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
from langchain.chains import RetrievalQA                     # RAG chain ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
from langchain.text_splitter import RecursiveCharacterTextSplitter  # ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
from langchain_core.documents import Document                # Document object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LangChain
from langchain.prompts import PromptTemplate                 # Template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö prompt

# === ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô AI Models ===
# ‡∏™‡∏£‡πâ‡∏≤‡∏á embedding model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (vector)
embedding_model = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á LLM ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç SOC
llm = Ollama(
    model="phi3:mini",                        # ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• Phi3 ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å
    temperature=0.1,                          # ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥ = ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
    system_message="""
    You are an expert SOC (Security Operations Center) Analyst AI specialized in cybersecurity threat detection.
    Your expertise includes:
    - Detecting brute-force attacks, DDoS, suspicious login patterns
    - Identifying malicious IPs and unusual network behavior
    - Analyzing authentication failures and privilege escalation
    - Recognizing malware signatures and data exfiltration attempts
    
    Always provide:
    1. Clear threat classification (Critical/High/Medium/Low)
    2. Specific evidence from logs with timestamps
    3. Recommended immediate actions
    4. Risk assessment and potential impact
    
    Be precise, actionable, and security-focused.
    """
)

# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå ===
def parse_uploaded_file(file_obj):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: JSON, CSV, LOG, TXT
    """
    try:
        # === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á file object ‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ ===
        if hasattr(file_obj, 'name') and isinstance(file_obj.name, str):
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
            filename_lower = file_obj.name.lower()
            with open(file_obj.name, 'r', encoding='utf-8') as f:
                content = f.read()
        elif hasattr(file_obj, 'read'):
            # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô file object ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
            content = file_obj.read().decode("utf-8")
            filename_lower = file_obj.name.lower() if hasattr(file_obj, "name") else ""
        elif isinstance(file_obj, str):
            # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô string path
            filename_lower = file_obj.lower()
            with open(file_obj, 'r', encoding='utf-8') as f:
                content = f.read()
        else:
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string
            file_path = str(file_obj)
            filename_lower = file_path.lower()
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
    except Exception as e:
        return [], f"üî¥ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {str(e)}"

    log_lines = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• log ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß

    # === ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå ===
    if filename_lower.endswith('.json'):
        # === ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå JSON ===
        try:
            data = json.loads(content)
            if isinstance(data, list):
                # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á objects
                for item in data:
                    if isinstance(item, str):
                        log_lines.append(item.strip())
                    elif isinstance(item, dict):
                        # ‡πÅ‡∏õ‡∏•‡∏á JSON object ‡πÄ‡∏õ‡πá‡∏ô log format
                        formatted_line = format_json_log(item)
                        log_lines.append(formatted_line)
                    else:
                        log_lines.append(str(item).strip())
            elif isinstance(data, dict):
                # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô object ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                formatted_line = format_json_log(data)
                log_lines.append(formatted_line)
            else:
                log_lines.append(str(data).strip())
        except Exception as e:
            return [], f"üî¥ ‡πÑ‡∏ü‡∏•‡πå JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {str(e)}"

    elif filename_lower.endswith('.csv'):
        # === ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå CSV ===
        try:
            csv_file = StringIO(content)
            reader = csv.DictReader(csv_file)
            for row in reader:
                # ‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡πÄ‡∏õ‡πá‡∏ô log format (key:value | key:value)
                formatted_row = " | ".join([f"{k}:{v}" for k, v in row.items() if v])
                if formatted_row:
                    log_lines.append(formatted_row)
        except Exception as e:
            return [], f"üî¥ ‡πÑ‡∏ü‡∏•‡πå CSV ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {str(e)}"

    elif filename_lower.endswith(('.log', '.txt')) or not filename_lower:
        # === ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ===
        log_lines = [line.strip() for line in content.splitlines() if line.strip()]
    else:
        return [], "‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ‡πÉ‡∏ä‡πâ .json, .csv, .log, ‡∏´‡∏£‡∏∑‡∏≠ .txt"

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not log_lines:
        return [], "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• log ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"

    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• log
    processed_logs = preprocess_logs(log_lines)
    return processed_logs, None

def format_json_log(json_obj):
    """
    ‡πÅ‡∏õ‡∏•‡∏á JSON object ‡πÄ‡∏õ‡πá‡∏ô log format ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    ‡πÇ‡∏î‡∏¢‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á fields
    """
    # Fields ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    important_fields = ['timestamp', 'time', 'datetime', 'source_ip', 'src_ip', 'ip', 
                       'user', 'username', 'event', 'action', 'status', 'message', 'error']
    
    formatted_parts = []
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° important fields ‡∏Å‡πà‡∏≠‡∏ô
    for field in important_fields:
        if field in json_obj:
            formatted_parts.append(f"{field}:{json_obj[field]}")
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° fields ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    for k, v in json_obj.items():
        if k not in important_fields:
            formatted_parts.append(f"{k}:{v}")
    
    return " | ".join(formatted_parts)

def preprocess_logs(log_lines):
    """
    ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö log entries ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    ‡πÄ‡∏û‡∏¥‡πà‡∏°: IP addresses, timestamps, security keywords
    """
    processed = []
    
    for line in log_lines:
        if not line.strip():
            continue
            
        enhanced_line = line
        
        # === ‡∏î‡∏∂‡∏á IP Addresses ===
        ip_pattern = r'\b(?:\d{1,3}\.){3}\d{1,3}\b'  # RegEx ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö IPv4
        ips = re.findall(ip_pattern, line)
        if ips:
            enhanced_line += f" | EXTRACTED_IPS:{','.join(ips)}"
        
        # === ‡∏î‡∏∂‡∏á Timestamps ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ ===
        timestamp_patterns = [
            r'\d{4}-\d{2}-\d{2}[T ]\d{2}:\d{2}:\d{2}',    # ISO format: 2024-01-01T12:00:00
            r'\d{2}/\d{2}/\d{4} \d{2}:\d{2}:\d{2}',        # US format: 01/01/2024 12:00:00
            r'\w{3} \d{2} \d{2}:\d{2}:\d{2}'               # Syslog format: Jan 01 12:00:00
        ]
        
        for pattern in timestamp_patterns:
            timestamps = re.findall(pattern, line)
            if timestamps:
                enhanced_line += f" | TIMESTAMP:{timestamps[0]}"
                break
        
        # === ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Security Keywords ===
        security_keywords = ['failed', 'error', 'denied', 'blocked', 'suspicious', 
                           'malware', 'virus', 'attack', 'intrusion', 'unauthorized',
                           'breach', 'violation', 'alert', 'warning']
        
        found_keywords = [kw for kw in security_keywords if kw.lower() in line.lower()]
        if found_keywords:
            enhanced_line += f" | SECURITY_INDICATORS:{','.join(found_keywords)}"
        
        processed.append(enhanced_line)
    
    return processed

# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏•‡∏±‡∏Å ===
def analyze_logs(message, logs):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå log ‡∏î‡πâ‡∏ß‡∏¢ AI
    ‡πÉ‡∏ä‡πâ RAG (Retrieval-Augmented Generation) approach
    """
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ log data ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if logs is None or not logs:
        return "üìÅ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå log ‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"

    # === ‡∏™‡∏£‡πâ‡∏≤‡∏á Documents ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LangChain ===
    documents = []
    for i, log_line in enumerate(logs):
        if log_line.strip():
            documents.append(Document(
                page_content=log_line.strip(),           # ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ log
                metadata={"line_number": i+1, "source": "uploaded_logs"}  # metadata
            ))
    
    if not documents:
        return "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• log ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"

    # === ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å ===
    splitter = RecursiveCharacterTextSplitter(
        chunk_size=300,        # ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô (characters)
        chunk_overlap=50,      # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡∏¥‡πâ‡∏ô
        separators=["\n", "|", " ", ""]  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    )
    split_docs = splitter.split_documents(documents)

    if not split_docs:
        split_docs = documents

    # === ‡∏™‡∏£‡πâ‡∏≤‡∏á Vector Store ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ===
    vectorstore = FAISS.from_documents(split_docs, embedding_model)

    # === ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt Template ===
    template = """
    ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå log ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏∞‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå SOC ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏à‡∏≤‡∏Å log entries ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö
    
    ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å logs:
    {context}
    
    ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}
    
    ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ:
    
    üîç ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏±‡∏¢‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°:
    - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏†‡∏±‡∏¢‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°: [Critical/High/Medium/Low]
    - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏†‡∏±‡∏¢‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°: [‡πÄ‡∏ä‡πà‡∏ô Brute Force, DDoS, Malware, ‡∏Ø‡∏•‡∏Ø]
    
    üìã ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:
    - ‡πÅ‡∏™‡∏î‡∏á log entries ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏° timestamps
    - ‡πÄ‡∏ô‡πâ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
    
    üéØ ‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô:
    - IP ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    - ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏î‡πâ
    - ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå
    
    ‚ö° ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:
    - ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    - ‡∏°‡∏≤‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß
    
    üîó ‡∏ï‡∏±‡∏ß‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:
    - IOCs ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
    - ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
    """

    prompt = PromptTemplate(
        template=template,
        input_variables=["context", "question"]
    )

    # === ‡∏™‡∏£‡πâ‡∏≤‡∏á RAG Chain ===
    rag_chain = RetrievalQA.from_chain_type(
        llm=llm,                                          # AI model
        retriever=vectorstore.as_retriever(search_kwargs={"k": 5}),  # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ 5 log entries ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        chain_type="stuff",                               # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á context
        return_source_documents=True,                     # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô source documents ‡∏î‡πâ‡∏ß‡∏¢
        chain_type_kwargs={"prompt": prompt}              # ‡πÉ‡∏ä‡πâ prompt template ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    )

    # === ‡∏£‡∏±‡∏ô AI Analysis ===
    try:
        result = rag_chain.invoke({"query": message})
        return result.get("result", "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å AI")
    except Exception as e:
        return f"üî¥ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {str(e)}"

# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó ===
def process_message(message, history, logs):
    """
    ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï chat history
    ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ ChatGPT interface
    """
    if not message.strip():
        return history, ""
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö)
    history.append([message, None])
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
    response = analyze_logs(message, logs)
    
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    history[-1][1] = response
    
    return history, ""  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ history ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°

def upload_and_process_file(file):
    """
    ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    """
    if file is None:
        return None, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î"
    
    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå
    logs, error = parse_uploaded_file(file)
    if error:
        return None, error
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    log_count = len(logs)
    success_message = f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏û‡∏ö {log_count:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ log ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"
    
    return logs, success_message

# === ‡∏™‡∏£‡πâ‡∏≤‡∏á Web UI ‡∏î‡πâ‡∏ß‡∏¢ Gradio ===
with gr.Blocks(
    title="üõ°Ô∏è SOC Analysis AI", 
    theme=gr.themes.Soft(),
    css="""
    .gradio-container {
        max-width: 900px !important;
        margin: 0 auto !important;
    }
    .chat-container {
        height: 600px !important;
    }
    .file-upload {
        border: 2px dashed #ccc !important;
        border-radius: 10px !important;
        padding: 20px !important;
        text-align: center !important;
    }
    """
) as demo:
    
    # === State Management ===
    logs_state = gr.State(None)  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• log ‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
    
    # === ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å ===
    gr.Markdown("""
    # üõ°Ô∏è **SOC Analysis AI Assistant**
    ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå log ‡πÅ‡∏•‡∏∞‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    """)
    
    # === ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ===
    with gr.Row():
        with gr.Column(scale=3):
            file_upload = gr.File(
                label="üìÅ ‡∏•‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å",
                file_types=['.json', '.csv', '.log', '.txt'],  # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ
                elem_classes="file-upload"
            )
    with gr.Column(scale=1):
        upload_btn = gr.Button("üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î", variant="primary", size="lg")
    
    # === ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ===
    upload_status = gr.Textbox(
        label="üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", 
        interactive=False,
        value="üîÑ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå...",
        show_label=False
    )
    
    gr.Markdown("---")
    
    # === ‡∏™‡πà‡∏ß‡∏ô Chat Interface ===
    with gr.Column():
        chatbot = gr.Chatbot(
            label="üí¨ ‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö SOC Analyst AI",
            height=500,
            show_label=False,
            placeholder="‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏à‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...",
            elem_classes="chat-container"
        )
        
        # ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á
        with gr.Row():
            message_box = gr.Textbox(
                placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö log ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì... (‡πÄ‡∏ä‡πà‡∏ô '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ brute force ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')",
                container=False,
                scale=4,
                show_label=False
            )
            send_button = gr.Button("üì®", variant="primary", scale=1, min_width=50)
    
    # === ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ===
    with gr.Row():
        gr.Examples(
            examples=[
                "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ brute force ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
                "IP ‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?", 
                "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
                "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏±‡∏¢‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°",
                "‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤"
            ],
            inputs=message_box,
            label="üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"
        )
    
    # === ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Events ===
    
    # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    upload_btn.click(
        fn=upload_and_process_file,      # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ô
        inputs=file_upload,              # input ‡∏Ñ‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        outputs=[logs_state, upload_status]  # output ‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• log ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    )
    
    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    def submit_message(message, history, logs):
        return process_message(message, history, logs)
    
    # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    send_button.click(
        fn=submit_message,
        inputs=[message_box, chatbot, logs_state],
        outputs=[chatbot, message_box]
    )
    
    # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Enter ‡πÉ‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    message_box.submit(
        fn=submit_message,
        inputs=[message_box, chatbot, logs_state],
        outputs=[chatbot, message_box]
    )

# === ‡∏£‡∏±‡∏ô Application ===
if __name__ == "__main__":
    demo.launch(
        share=False,        # ‡πÑ‡∏°‡πà‡πÅ‡∏ä‡∏£‡πå‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
        server_name="0.0.0.0",  # ‡∏£‡∏±‡∏ö connection ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å IP
        server_port=7860,   # ‡∏û‡∏≠‡∏£‡πå‡∏ï
        show_error=True     # ‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏ô browser
    )